// Generated by CoffeeScript 1.11.1
(function() {
  var $, $$, all, any, closeBtn, makeMap, menu, ready, scrollTo;

  any = function(el, predicate) {
    return (el != null) && (predicate(el) || any(el.parentElement, predicate));
  };

  all = function(el, predicate) {
    if (el != null) {
      return predicate(el) && any(el.parentElement, predicate);
    } else {
      return true;
    }
  };

  $ = document.querySelector;

  $$ = document.querySelectorAll;

  menu = null;

  closeBtn = null;

  if (document.readyState === 'complete') {
    ready();
  } else {
    document.onreadystatechange = function() {
      if (document.readyState === 'complete') {
        return ready();
      }
    };
  }

  makeMap = function(element, ratioX, ratioY) {
    var c, getColor, i, len, map, process, ref;
    if (ratioX > 1) {
      ratioX = ratioX / document.body.offsetWidth;
    }
    if (ratioY > 1) {
      ratioY = ratioY / document.body.offsetHeight;
    }
    map = document.createElement('div');
    map.className = 'map';
    map.style.backgroundColor = window.getComputedStyle(element).backgroundColor;
    getColor = function(color) {
      var b, g, r, yiq;
      r = parseInt(color.substr(1, 2), 16);
      g = parseInt(color.substr(3, 2), 16);
      b = parseInt(color.substr(5, 2), 16);
      yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;
      if (yiq >= 128) {
        return 'black';
      } else {
        return 'white';
      }
    };
    process = function(child) {
      var c, div, i, j, len, len1, prop, ref, ref1, results, style;
      div = document.createElement('div');
      style = window.getComputedStyle(child);
      if (child.hasAttribute('data-title')) {
        div.innerText = child.getAttribute('data-title');
        div.style.color = getColor(style.color);
      } else if (child.hasAttribute('data-subtitle')) {
        div.innerText = child.getAttribute('data-subtitle');
        div.style.color = getColor(style.color);
      }
      ref = ['backgroundColor', 'opacity', 'visibility'];
      for (i = 0, len = ref.length; i < len; i++) {
        prop = ref[i];
        div.style[prop] = style[prop];
      }
      div.style.width = (child.offsetWidth * ratioX) + 'px';
      div.style.height = (child.offsetHeight * ratioY) + 'px';
      div.style.left = (child.offsetLeft * ratioX) + 'px';
      div.style.top = (child.offsetTop * ratioY) + 'px';
      map.appendChild(div);
      ref1 = child.children;
      results = [];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        c = ref1[j];
        results.push(process(c));
      }
      return results;
    };
    ref = element.children;
    for (i = 0, len = ref.length; i < len; i++) {
      c = ref[i];
      process(c);
    }
    return map;
  };

  scrollTo = function(scrollTarget, speed) {
    var currentScroll, currentTime, tick, time;
    if (scrollTarget == null) {
      scrollTarget = 0;
    }
    if (speed == null) {
      speed = 2000;
    }
    currentScroll = window.scrollY;
    currentTime = 0;
    time = Math.max(.1, Math.min(Math.abs(window.scrollY - scrollTarget) / speed, .8));
    tick = function() {
      var p, t;
      currentTime += 1 / 60;
      p = currentTime / time;
      t = -0.5 * (Math.cos(Math.PI * p) - 1);
      if (p < 1) {
        requestAnimationFrame(tick);
        return window.scrollTo(0, currentScroll + ((scrollTarget - currentScroll) * t));
      } else {
        return window.scrollTo(0, scrollTarget);
      }
    };
    return tick();
  };

  document.onclick = function(e) {
    var child, el, i, isSub, len, map, ratioX, ratioY, rect, ref;
    if (menu === null) {
      menu = document.createElement('div');
      menu.id = 'menu';
      ref = document.querySelectorAll('[data-title], [data-subtitle]');
      for (i = 0, len = ref.length; i < len; i++) {
        el = ref[i];
        isSub = el.hasAttribute('data-subtitle');
        child = document.createElement('a');
        child.classList.add(isSub ? 'subtitle' : 'title');
        child.innerText = el.getAttribute(isSub ? 'data-subtitle' : 'data-title').toUpperCase();
        child.setAttribute('data-offset', el.offsetTop);
        child.onclick = function() {
          return scrollTo(this.getAttribute('data-offset'));
        };
        menu.appendChild(child);
      }
      closeBtn = document.createElement('a');
      closeBtn.id = 'close';
      document.body.prepend(menu);
      document.body.prepend(closeBtn);
      ratioX = Math.min(document.body.offsetWidth, document.body.offsetHeight);
      ratioY = ratioX * (document.body.offsetWidth / document.body.offsetHeight);
      ratioX = 300;
      ratioY = 600;
      map = makeMap(document.body, ratioX, ratioY);
      map.style.height = ratioY + 'px';
      map.style.width = ratioX + 'px';
      document.body.appendChild(map);
    }
    if (menu.classList.contains('shown')) {
      return menu.classList.remove('shown');
    } else if (all(e.target, function(_) {
      return _.tagName === 'DIV' || _.tagName === 'SECTION' || _.tagName === 'HTML' || _.tagName === 'BODY';
    })) {
      rect = menu.getBoundingClientRect();
      menu.style.left = (e.x - (rect.width / 2)) + 'px';
      menu.style.top = (e.y - (rect.height / 2)) + 'px';
      closeBtn.style.left = e.x + 'px';
      closeBtn.style.top = e.y + 'px';
      return menu.classList.add('shown');
    }
  };

  ready = function() {
    var originalMailTo;
    originalMailTo = document.getElementById('mail').href;
    return document.getElementById('message').onchange = function(e) {
      return document.getElementById('mail').href = originalMailTo + '&body=' + encodeURIComponent(e.target.value);
    };
  };

}).call(this);
